#!/bin/bash

PROG=`basename $0`
CODENAME=( 'ace' 'blade' 'bravo' 'bravoc' 'buzz' 'click' 'crespo' 'dream' \
  'encore' 'espresso' 'glacier' 'hero' 'heroc' 'inc' 'legend' 'liberty' \
  'one' 'passion' 'sapphire' 'sholes' 'speedy' 'supersonic' 'vision' 'z71' \
  'zero' )

retail_name() {
  local codename=$1
  local retail
  case $codename in
    ace) retail="HTC Desire HD";;
    blade) retail="ZTE Blade";;
    bravo) retail="HTC Desire (GSM)";;
    bravoc) retail="HTC Desire (CDMA)";;
    buzz) retail="HTC Wildfire";;
    click) retail="HTC Click";;
    crespo) retail="Google Nexus S";;
    dream) retail="HTC G1";;
    encore) retail="Barnes & Noble NookColor";;
    espresso) retail="HTC MyTouch 3G Slide";;
    glacier) retail="HTC Glacier";;
    hero) retail="HTC Hero (GSM)";;
    heroc) retail="HTC Hero (CDMA)";;
    inc) retail="HTC Droid Incredible";;
    legend) retail="HTC Legend";;
    liberty) retail="HTC Aria";;
    one) retail="GeeksPhone ONE";;
    passion) retail="Google Nexus One";;
    sapphire) retail="HTC Magic";;
    sholes) retail="Motorola Droid";;
    speedy) retail="HTC Speedy";;
    supersonic) retail="HTC Evo 4G";;
    vision) retail="HTC Vision";;
    z71) retail="Commtiva Z71";;
    zero) retail="MSM Zero";;
  esac
  echo "$retail"
}

retrieve_latest_name() {
  ( which wget &>/dev/null ) || return
  local buildtype=$1
  local device=$2
  local url="http://mirror.teamdouche.net/?device=$device&type=$buildtype"
  local index="/tmp/$device_$buildtype-index.tmp"
  local i j latest
  j=1
  wget -q $url -O $index || { rm -f $index; return; }
  for i in `cat $index | grep ".zip" | tr '<>' ' ' | awk {'print $3'}`; do
    if [ $j -eq 1 ]; then
      latest="$i"
      break
    fi
    (( j++ )) # pointless, I know...
  done
  [ -z $latest ] && { rm -f $index; return; }
  rm -f $index
  echo "$latest"
}

download_build() {
  local device=$1
  local filename=$2
  local path="$HOME/CyanogenModBuilds"
  local url="http://mirror.teamdouche.net/get/$filename"
  mkdir -p $path
  wget $url -O $path/$filename
  [ $? != 0 ] && { echo "$PROG: connection error"; exit 1; }
  [ -f $path/$filename ] && echo "Success!"
}

show_help() {
  echo "==============================="
  echo "usage: $PROG [stable|nightly|rc|show] [DEVICE1] [DEVICE2] ..."
  echo
  echo "Options:"
  echo "-------"
  echo "  stable      download latest stable build for device[s]"
  echo "  nightly     download latest nightly build for device[s]"
      unset l
  echo "  rc          download latest release candidate for device[s]"
  echo "  show        only show latest builds for device[s] (don't download)"
  echo "  help        this message"
  echo
  echo "Note: options/devices can be provided in any order"
  echo
  echo "Available Devices:"
  echo "-----------------"
  local i j k l m n
  l=0
  for j in ${CODENAME[@]}; do
    k=${#j}
    if [ $k -gt $l ]; then
      l=$k
    fi
  done
  for i in ${CODENAME[@]}; do
    m=${#i}
    echo -n "  $i"
    for (( n = 0; n < $l - $m + 2; n++ )); do
      echo -n " "
    done
    echo "`retail_name $i`"
  done
  echo
  echo "Note: device codename is expected on command line"
  echo
  echo "Written by Nathan Forbes <www.nathan-forbes.com>"
  echo "Report bugs/issues to me@nathanforbes.com"
  echo "==============================="
  exit 0
}

STABLE=0
NIGHTLY=0
RC=0
SHOW=0
HELP=0
DEVICES=()

for i in $@; do
  case $i in
    stable) (( STABLE++ ));;
    nightly) (( NIGHTLY++ ));;
    rc) (( RC++ ));;
    show) (( SHOW++ ));;
    help) (( HELP++ ));;
    *) for j in ${CODENAME[@]};do
         if [ "$i" = "$j" ]; then
           DEVICES[${#DEVICES[@]}]=$j
         fi
       done
       if [ ${#DEVICES[@]} -eq 0 ]; then
         echo "$PROG: \`$i' command not found, use \`help' for help"
         exit 1
       fi;;
  esac
done

if (( HELP )); then
  show_help
fi

if (( STABLE )) || (( NIGHTLY )) || (( RC )) || (( SHOW )); then
  if [ ${#DEVICES[@]} -eq 0 ]; then
    echo "$PROG: no devices given, use \`help' for help"
    exit 1
  fi
fi

for d in ${DEVICES[@]}; do
  echo "  Device: $d -- `retail_name $d`"
  if (( STABLE )); then
    echo "    Downloading latest stable build for $d"
    file=`retrieve_latest_name stable $d`
    if [ ! -z $file ]; then
      download_build $d $file
    else
      echo "$PROG: an error occurred..."
    fi
  elif (( NIGHTLY )); then
    echo "    Downloading latest nightly build for $d"
    file=`retrieve_latest_name nightly $d`
    if [ ! -z $file ]; then
      download_build $d $file
    else
      echo "$PROG: an error occurred"
    fi
  elif (( RC )); then
    echo "    Downloading latest release candidate for $d"
    file=`retrieve_latest_name rc $d`
    if [ ! -z $file ]; then
      download_build $d $file
    else
      echo "$PROG: an error occurred"
    fi
  elif (( SHOW )); then
    echo "    Showing all latest builds for $d"
    k=1
    for i in `retrieve_latest_name stable $d` \
             `retrieve_latest_name nightly $d` \
             `retrieve_latest_name rc $d`
    do
      case $k in
        1) echo "        stable:  $i" ;;
        2) echo "        nightly: $i";;
        3) echo "        rc:      $i";;
      esac
      (( k++ ))
    done
  fi
done
