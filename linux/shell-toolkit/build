#!/usr/bin/env bash

TARGETS="eq ne gt ge lt le fe fne fsz"

if [ "`which gcc`" != "" ]
then
   COMPILER=gcc
elif [ "`which cc`" != "" ]
then
   COMPILER=cc
else
   echo "Could not find a C compiler! Please install gcc"
   exit
fi

Build() {
   local target=$1
   echo "CC: $target.c  ->  $target"
   $COMPILER "$target.c" -o "$target"
}

Install() {
   local LOC="/usr/local/bin"
   local i
   for i in $TARGETS
   do
      if [ ! -f "$i" ]
      then
         Build $i
      fi
      echo "Install:  $i  ->  $LOC/$i"
      install "$i" "$LOC/$i"
   done
}

Uninstall() {
   local LOC
   local one=$1
   local i
   if [ "$one" != "" ]
   then
      local target=$@
   else
      local target=$TARGETS
   fi
   for i in $target
   do
      LOC=`which $i`
      if [ "$LOC" != "" ]
      then
         echo "Uninstall:  $LOC"
         rm -f "$LOC"
      fi
   done
}

PASS="    PASS"
FAIL="    FAIL"

EQTests() {
   echo "eq ..."
   echo "  test 1 ..."
   if ./eq blah blah blah; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 2 ..."
   if ./eq blah blah blah blah blah halb; then echo "$FAIL"; else echo "$PASS"; fi
   echo "  test 3 ..."
   if ./eq 10 10; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 4 ..."
   if ./eq 14.3 14.3; then echo "$PASS"; else echo "$FAIL"; fi
}

NETests() {
   echo "ne ..."
   echo "  test 1 ..."
   if ./ne blah blah blah; then echo "$FAIL"; else echo "$PASS"; fi
   echo "  test 2 ..."
   if ./ne blah blah halb blah; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 3 ..."
   if ./ne 1 15; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 4 ..."
   if ./ne 5.5 9.3; then echo "$PASS"; else echo "$FAIL"; fi
}

GTTests() {
   echo "gt ..."
   echo "  test 1 ..."
   if ./gt 5 4; then echo "$PASS"; else echo "$FAIL";fi
   echo "  test 2 ..."
   if ./gt 6.7 4.2; then echo "$PASS"; else echo "$FAIL";fi
}

GETests() {
   echo "ge ..."
   echo "  test 1 ..."
   if ./ge 10 6; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 2 ..."
   if ./ge 7 7; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 3 ..."
   if ./ge 1.3 0.4; then echo "$PASS"; else echo "$FAIL"; fi
}

LTTests() {
   echo "lt ..."
   echo "  test 1 ..."
   if ./lt 8 20; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 2 ..."
   if ./lt 7.1 80.8; then echo "$PASS"; else echo "$FAIL"; fi
}

LETests() {
   echo "le ..."
   echo "  test 1 ..."
   if ./le 7 18; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 2 ..."
   if ./le 8 8; then echo "$PASS"; else echo "$FAIL"; fi
   echo "  test 3 ..."
   if ./le 56.6 78.9; then echo "$PASS"; else echo "$FAIL"; fi
}

FETests() {
   echo "fe ..."
   echo "  test 1 ..."
   touch testfile
   if ./fe testfile; then echo "$PASS"; else echo "$FAIL"; fi
   rm -f testfile
}

FNETests() {
   echo "fne ..."
   echo "  test 1 ..."
   if ./fne somefile; then echo "$PASS"; else echo "$FAIL"; fi
}

RunTests() {
   local i
   local ERR=0
   for i in $TARGETS
   do
      if [ ! -f "$i" ]
      then
         Build $i
         if [ ! -f "$i" ]
         then
           (( ERR++ ))
         fi
      fi
   done
   if (( ERR ))
   then
      echo "All targets did not compile successfully, exiting..."
      return
   fi
   echo "Running tests..."
   EQTests
   NETests
   GTTests
   GETests
   LTTests
   LETests
   FETests
   FNETests
}

if [ "$1" = "" ]
then
   for i in $TARGETS
   do
      Build $i
   done
else
   if [ "$1" = "install" ]
   then
      Install
      exit
   elif [ "$1" = "uninstall" ]
   then
      if [ $# > 1 ]
      then
         T=($@)
         T=(${T[@]:1})
         T="${T[@]}"
         Uninstall $T
      else
         Uninstall
      fi
      exit
   elif [ "$1" = "clean" ]
   then
      rm -f $TARGETS
      exit
   elif [ "$1" = "help" ]
   then
      echo "usage: $0 [install|uninstall|clean|test]"
      exit
   elif [ "$1" = "test" ]
   then
      RunTests
      exit
   else
      for i in "$@"
      do
         for n in $TARGETS
         do
            if [ "$n" = "$i" ]
            then
               Build "$n"
            fi
         done
      done
   fi
fi
