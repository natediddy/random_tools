#!/usr/bin/env python
#
# AnyKernel ZIP maker
# n8dyddy
#

import os, sys, shutil, datetime
from optparse import OptionParser
from time import sleep

# Do NOT edit
DATE = datetime.datetime.now().strftime("%b-%A-%I_%M%p")
HOME = os.getenv('HOME')
USER = os.getlogin()
ZIPNAME = USER + "_kernel"

# The below 3 variables MUST be edited to match your personal paths on your machine
# Please only edit the CAPS that ARE IN QUOTES!
OMAP = HOME + "/PATH/TO/omap"
TI = HOME + "/PATH/TO/ti"
PREBUILT = HOME + "/PATH/TO/prebuilt"

# For example this is what the 3 variables above ^, look like in my personal copy:
#OMAP = HOME + "/android/cm/kernel/omap"
#TI = HOME + "/android/cm/kernel/ti"
#PREBUILT = HOME + "/android/cm/kernel/prebuilt"

# Do NOT edit
FINISHED_DIR = HOME + "/my_kernels/"
ANYKERNEL = HOME + "/AnyKernel"
ANYW = ANYKERNEL + "/system/lib/modules/tiwlan_drv.ko"
# ^^^ If "tiwlan_drv.ko" is not the name of your device's wifi module please edit!
ANYZ = ANYKERNEL + "/kernel/zImage"
ZIMAGE = OMAP + "/arch/arm/boot/zImage"
WIFI = TI + "/wilink_6_1/platforms/os/linux/tiwlan_drv.ko"

def zipItUpBitch():
    # Switch to AnyKernel directory
    os.chdir(ANYKERNEL)

    #TODO: Use Python's zipfile abilities to zip everything up instead of the shell zip
    os.system("zip -r new_kernel system kernel META-INF")
    if os.path.isfile("new_kernel.zip"):
	print "New anykernel zip created successfully!"
	FINISHED_ZIP = FINISHED_DIR + ZIPNAME + "-" + DATE + ".zip"
	shutil.copy("new_kernel.zip", FINISHED_ZIP)
    else:
	print "New anykernel zip was NOT created successfully!"
	sys.exit(1)
    if os.path.isfile(FINISHED_ZIP):
	os.remove(ANYKERNEL + "/" + "new_kernel.zip")
	print "Your new anykernel zip is located in " + FINISHED_DIR

    if os.path.isdir(HOME + "/Dropbox/Public"):
	DROPBOX = HOME + "/Dropbox/Public/"
	print "Dropbox directory has been found.\nAttempting to upload new kernel...\n"
    	if not os.path.isdir(DROPBOX + "anykernel_zips"):
	    os.makedirs(DROPBOX + "anykernel_zips")
	DB_ZIP = DROPBOX + "anykernel_zips" + "/" + ZIPNAME + "-" + DATE + ".zip"
	shutil.copy(FINISHED_ZIP, DB_ZIP)
	if os.path.isfile(DB_ZIP):
	    print "Successfully moved new zip to Dropbox directory to upload!"
    else:
	print "No Dropbox directory found in " + HOME + "\nNot uploading new zip to Dropbox"

    print "-" * 60 + "\n\nFinished\n\n"

def prepareZip():
    if not os.path.isdir(FINISHED_DIR):
	os.makedirs(FINISHED_DIR)
    
    os.chdir(HOME)
    if not os.path.isdir(ANYKERNEL):
	os.system("git clone git://github.com/koush/AnyKernel.git AnyKernel")
    if os.path.isfile(ANYZ):
	os.remove(ANYZ)
    if os.path.isfile(ANYW):
	os.remove(ANYW)

    if not os.path.isfile(ZIMAGE):
	print "No zImage found! Did you compile one?"
	sys.exit(1)
    else:
	shutil.copy(ZIMAGE, ANYZ)
    if not os.path.isfile(WIFI):
	print "No wifi module found! Did you compile one?"
	sys.exit(1)
    else:
	shutil.copy(WIFI, ANYW)
    if os.path.isfile(ANYW): 
	print "Successfully copied wifi module to Anykernel directory!"
    else:
	print "Wifi module was not copied successfully to AnyKernel directory! Exiting..."
	sys.exit(1)
    if os.path.isfile(ANYZ): 
	print "Successfully copied zImage to Anykernel directory!"
    else:
	print "zImage was not successfully copied to AnyKernel directory! Exiting..."
	sys.exit(1)

    sleep(2)  

    print "-" * 60 + "\n\nAll files in place\n\n"    
   

    print "Preparing to zip new AnyKernel..."
    return zipItUpBitch()

def Kernel():
    DEFCONFIG = raw_input("Please enter the name of the defconfig file you wish to use to compile your kernel from:")

    if os.path.isfile(ZIMAGE):
	os.remove(ZIMAGE)
    if os.path.isfile(WIFI):
	os.remove(WIFI)

    os.chdir(OMAP)
    os.system("bash -c 'export ARCH=arm && sleep 3 && export CROSS_COMPILE='" + PREBUILT + "'/linux-x86/toolchain/arm-eabi-4.4.0/bin/arm-eabi- && sleep 3 && make '" + DEFCONFIG + "' && sleep 3 && make -j4'")

    if os.path.isfile(ZIMAGE):
	sleep(2)
	print "-" * 60 + "\n\nzImage Compiled\n\n"
    else:
	print "\n\nzImage FAILED\n\n"
	sys.exit(1)

    os.chdir(TI + "/wilink_6_1/platforms/os/linux")
    os.system("bash -c 'export ARCH=arm && sleep 3 && export CROSS_COMPILE='" + PREBUILT + "'/linux-x86/toolchain/arm-eabi-4.4.0/bin/arm-eabi- && sleep 3 && export HOST_PLATFORM=zoom2 && sleep 3 && export KERNEL_DIR='" + OMAP + "' && sleep 3 && make'")

    if os.path.isfile(WIFI):
	sleep(2)
	print "-" * 60 + "\n\nWifi Module Compiled\n\n"
    else:
	print "\n\nWifi Module FAILED\n\n"
	sys.exit(1)

    return prepareZip()

def main():
    parser = OptionParser(usage="usage: %prog -m [mkzip-only] [mkkernelzip]", version="1.0")
    parser.add_option("-m", "--method", dest='method', help="Make just a zip from existing zImage+wifi module. Or compile a new kernel and make a new zip afterward from the new kernel [mkzip-only] [mkkernelzip]")
    (options, args) = parser.parse_args()

    if options.method == "mkzip-only":
	return prepareZip()

    if options.method == "mkkernelzip":
	return Kernel()

if __name__ == '__main__':
    main()
