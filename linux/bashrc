# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    # make only my prompt bold text, everything else normal (I use black text on white background; looks nice)
    PS1='${debian_chroot:+($debian_chroot)}\[\033[1m\]\u@\h:\w\$\[\033[0m\] '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

##########################################
####### PERSONAL EDITS START HERE ########
##########################################

export PATH=/home/nathan/.android-sdk/tools:$PATH

alias attach='screen -raAd'  # for screen

function google()
{
    local GOOGLE="http://www.google.com/search?sourceid=chrome&ie=UTF-8&q="

    if [ "$#" -eq 0 ]
    then
        echo "Provide search terms for Google"
        return 1
    else
        local SEARCH="`echo $@ | tr " " "+"`"
        google-chrome "$GOOGLE$SEARCH" >/dev/null
    fi  
}

function url()
{
    if [ "$#" -eq 0 ]
    then
        echo "Provide an argument"
        return 1
    else
        if [ "$1" = "-i" ]
        then
            local URL="$2"
            if [ ! "$URL" ]
            then
                echo "Provide url for incognito"
                return 1
            else
                google-chrome --incognito "$URL" >/dev/null
            fi
        else
            if [ "$1" != "" ]
            then
                local URL="$1"
                google-chrome "$URL" >/dev/null
            fi
        fi
    fi
}

function buildAndroid()
{
    local DIR="$1"
    local DEV="$2"
    local SYNC="$3"
    local CLEAN="$4"

    for ARG in "$1" "$2"
    do
        if [ "$ARG" = "" ]
        then
            echo "Not enough arguments provided"
            echo "Usage: buildAndroid <path/to/repo> <target_device> <repo_sync?> <clean?>"
            return
        fi
    done

    pushd $DIR
    . build/envsetup.sh >/dev/null; lunch $DEV >/dev/null;

    if [ "$SYNC" != "" ]
    then
        if [ "$SYNC" = "--sync" ]
        then
            repo sync
        else
            echo "'$SYNC' not valid"
            return
        fi
    fi

    if [ "$CLEAN" != "" ]
    then
        if [ "$CLEAN" = "--clean" ]
        then
            make installclean
        else
            echo "'$CLEAN' not valid"
            return
        fi
    fi

    if [ ! -d "$DIR/vendor/cyanogen" ]
    then
        make -j6 otapackage
    else
        make -j6 bacon
    fi

    popd
}

function calc()
{
    # handy dandy calculator

    # NOTE: multiplication/division operations MUST be: "( 1 * 1 )" or "( 10 / 5 )" <-- WITH quotes

    # Usage: calc 1 + 7 - "( 10 * 4 / 6 )"

    local x

    if [ "$#" -lt 1 ]
    then
        echo "Nothing given"
        return 1
    elif (( "$*" ))
    then
        let x="$*"
        echo "$x"
        return 0
    else
        echo "$x = 0 OR $x is not an arithmetic expression"
        return 1
    fi
}

function chrome()
{
    case $1 in
    	-i) google-chrome --incognito >/dev/null ;;
    	 *) google-chrome >/dev/null ;;
    esac
}

function eclipse()
{
    /home/nathan/eclipse/eclipse
}

function twhirl()
{
    # Twitter client
    '/opt'/'twhirl'/bin/'twhirl'
}
