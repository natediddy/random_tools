#!/bin/bash
#
# Apk Release Signer Script
# (for use with `ant', not Eclipse. If you use Eclipse you don't want/need this!)
# natediddy
#
# In order to use this, you must first have created your own release key
# To create a key try something like:
#
# 		keytool -genkey -v -keystore \
# 		<~/path/to/name-of-key>.keystore \
# 		-alias <alias_name> \
# 		-keyalg RSA -keysize 2048 -validity 10000
#
# In the above example, words surrounded by "<>" characters denote something
# you need to provide yourself
#
# After you've compiled your app, move to your <projectRoot>/bin directory,
# then execute this script on the newly compiled <appname>-unsigned.apk
# (assumes you're in the directory containing the unsigned apk)
#

err() { local e=$1 ; shift ; echo "$e" ; exit 1 ; }

APK=$1
KEY=$2

[ ! $APK ] && err "APK name not provided"
[ ! $KEY ] && err "Must provide path to key as 2nd arg"
[ ! -e "$( pwd )/$APK" -o ! -f "$( pwd )/$APK" ] && err "\`$APK' does not exist in this directory"
[ "$( echo "$APK" | grep "\.apk$" )" = "" ] && err "\`$APK' not an APK file"
[ ! -e "$KEY" -o ! -f "$KEY" ] && err "\`$KEY' does not exist"
[ "$( echo "$KEY" | grep "\.keystore$" )" = "" ] && err "\`$KEY' doesn't seem to be a key (suffix not \`.keystore')"

jarsigner -verbose -keystore $2 $1 my_key

[ "$( jarsigner -verify $APK )" = "jar verified." ] || err "Failure to sign \`$APK'"

echo "Success signing \`$APK'"
echo "Zipaligning..."

ALIGNED="$( pwd )/$( basename $APK -unsigned.apk )-signed-aligned.apk"

zipalign -v 4 $APK $ALIGNED

(( $? )) && err "Failure zipaligning \`$APK'"

echo "Success"
echo -n -e "Signed and zipaligned APK located at:\n\t$ALIGNED\n"

exit 0
